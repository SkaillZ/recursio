[gd_scene load_steps=5 format=2]

[ext_resource path="res://Players/Ghost.tscn" type="PackedScene" id=1]
[ext_resource path="res://Players/VisibilityLight.tscn" type="PackedScene" id=2]

[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D visibility_mask;
uniform vec4 color: hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform float visibility_threshold = 0.1;
uniform float camera_size = 70;

varying vec3 world_vertex;

void vertex() {
	world_vertex = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xyz;
}

void fragment() {
	vec2 uv = world_vertex.xz;
	uv += vec2(camera_size / 2.0, camera_size / 2.0);
	uv /= camera_size;
	uv.y = 1.0 - uv.y;
	
	ALPHA = float(length(texture(visibility_mask, uv).rgb) > visibility_threshold);
	ALBEDO = color.rgb;
	//ALBEDO = vec3(uv.x);
}"

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/color = Color( 0.443137, 0.443137, 0.443137, 1 )
shader_param/visibility_threshold = 0.2
shader_param/camera_size = 70.0

[node name="PlayerGhost" instance=ExtResource( 1 )]

[node name="Mesh_Body" parent="." index="1"]
material_override = SubResource( 2 )

[node name="Mesh_Eyes" parent="Mesh_Body" index="0"]
material_override = SubResource( 2 )

[node name="VisibilityLight" parent="." index="2" instance=ExtResource( 2 )]
